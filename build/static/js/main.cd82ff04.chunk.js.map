{"version":3,"sources":["App.js","components/Sidebar.js","containers/Sidebar.js","components/Message.js","components/MessagesList.js","containers/MessagesList.js","components/AddMessage.js","actions/index.js","containers/AddMessage.js","constants/ActionTypes.js","components/Player.js","containers/Player.js","reducers/messages.js","reducers/users.js","reducers/video.js","reducers/index.js","sagas/index.js","sockets/index.js","utils/name.js","index.js"],"names":["lanUrlForConfig","Sidebar","_ref","users","react_default","a","createElement","id","className","map","user","key","name","connect","state","SidebarComponent","Message","message","author","MessagesList","messages","components_Message","Object","assign","MessagesListComponent","AddMessage","props","input","onKeyPress","e","dispatch","value","type","ref","node","nextMessageId","nextUserId","addMessage","AddMessageComponent","Player","video","length","ReactPlayer_default","url","playing","PlayerComponent","address","ip","test","undefined","_e","console","log","App","containers_Sidebar_Sidebar","containers_MessagesList_MessagesList","containers_AddMessage_AddMessage","containers_Player_Player","Component","arguments","action","concat","chat","combineReducers","handleNewMessage","regenerator_default","mark","params","wrap","_context","prev","next","takeEvery","username","socket","send","JSON","stringify","stop","this","setupSocket","ws_uri","loc","window","location","protocol","host","pathname","WebSocket","onopen","onmessage","event","data","parse","chance","Chance","first","sagaMiddleware","createSagaMiddleware","store","createStore","reducers","applyMiddleware","run","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.cd82ff04.chunk.js","sourcesContent":["import React, { Component } from \"react\"\nimport \"./App.css\"\nimport { Sidebar } from \"./containers/Sidebar\"\nimport { MessagesList } from \"./containers/MessagesList\"\nimport { AddMessage } from \"./containers/AddMessage\"\nimport { Player } from \"./containers/Player\"\n\nimport address from 'address'\n\nlet lanUrlForConfig;\ntry {\n  // This can only return an IPv4 address\n  debugger;\n  lanUrlForConfig = address.ip();\n  if (lanUrlForConfig) {\n    // Check if the address is a private ip\n    // https://en.wikipedia.org/wiki/Private_network#Private_IPv4_address_spaces\n    if (\n      /^10[.]|^172[.](1[6-9]|2[0-9]|3[0-1])[.]|^192[.]168[.]/.test(\n        lanUrlForConfig\n      )\n    ) {\n      // Address is private, format it for later use\n    \n    } else {\n      // Address is not private, so we will discard it\n      lanUrlForConfig = undefined;\n    }\n  }\n} catch (_e) {\n  // ignored\n}\n\nconsole.log(lanUrlForConfig);\n\nclass App extends Component {\n  render() {\n    return (\n      <div id=\"container\">\n        <Sidebar />\n        <section id=\"main\">\n          <MessagesList />\n          <AddMessage />\n        </section>\n        <section id=\"player\">\n          <Player />\n        </section>\n      </div>\n    )\n  }\n}\n\nexport default App","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst Sidebar = ({ users }) => (\n  <aside id=\"sidebar\" className=\"sidebar\">\n    <ul>\n      {users.map(user => (\n        <li key={user.id}>{user.name}</li>\n      ))}\n    </ul>\n  </aside>\n)\n\nSidebar.propTypes = {\n  users: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired\n}\n\nexport default Sidebar","import { connect } from 'react-redux'\nimport SidebarComponent from '../components/Sidebar'\n\nexport const Sidebar = connect(state => ({\n  users: state.users\n}), {})(SidebarComponent)","\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\n\n\nconst Message = ({ message, author }) => {\n    return <li>\n      <i>{author}</i>: {message}         \n    </li>\n  };\n\nMessage.propTypes = {\n  message: PropTypes.string.isRequired,\n  author: PropTypes.string.isRequired\n}\n\nexport default Message","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Message from \"./Message\"\n\n\nconst MessagesList = ({ messages }) => (\n  <section id=\"messages-list\">\n    <ul>\n    {messages.map(message => (\n      <Message\n      key={message.id}\n      {...message}\n      />\n    ))}\n    </ul>\n  </section>\n)\n\nMessagesList.propTypes = {\n  messages: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      message: PropTypes.string.isRequired,\n      author: PropTypes.string.isRequired\n    }).isRequired\n  ).isRequired\n}\n\nexport default MessagesList","import { connect } from 'react-redux'\nimport MessagesListComponent from '../components/MessagesList'\n\nexport const MessagesList = connect(state => ({\n  messages: state.messages\n}), {})(MessagesListComponent)","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst AddMessage = (props) => {\n  let input\n\n  return (\n    <section id=\"new-message\">\n      <input\n        onKeyPress={(e) => {\n        if (e.key === 'Enter') {\n          props.dispatch(input.value, 'Me')\n          input.value = ''\n        }\n      }}\n        type=\"text\"\n        ref={(node) => {\n        input = node\n      }}\n      />\n    </section>\n  )\n}\n\nAddMessage.propTypes = {\n  dispatch: PropTypes.func.isRequired\n}\n\nexport default AddMessage","import * as types from '../constants/ActionTypes'\n\nlet nextMessageId = 0\nlet nextUserId = 0\n\nexport const addMessage = (message, author) => ({\n      type: types.ADD_MESSAGE,\n      id: nextMessageId++,\n      message,\n      author\n    })\n\nexport const addUser = name => ({\n  type: types.ADD_USER,\n  id: nextUserId++,\n  name\n})\n\nexport const messageReceived = (message, author) => ({\n  type: types.MESSAGE_RECEIVED,\n  id: nextMessageId++,\n  message,\n  author\n})\n\nexport const populateUsersList = users => ({\n  type: types.USERS_LIST,\n  users\n})\n","import { connect } from 'react-redux'\nimport AddMessageComponent from '../components/AddMessage'\nimport { addMessage } from '../actions'\n\n\nconst mapDispatchToProps = dispatch => ({\n  dispatch: (message, author) => {\n    dispatch(addMessage(message, author))\n  }\n})\n\nexport const AddMessage = connect(() => ({}), mapDispatchToProps)(AddMessageComponent)","export const ADD_MESSAGE = 'ADD_MESSAGE'\nexport const MESSAGE_RECEIVED = 'MESSAGE_RECEIVED'\nexport const ADD_USER = 'ADD_USER'\nexport const USERS_LIST = 'USERS_LIST'\n","import React from \"react\"\nimport ReactPlayer from 'react-player'\n\n\nconst Player = ({ video }) => \n{    \n    return video[video.length-1] ? <ReactPlayer url={video[video.length-1].url} playing/> : ''\n}\n\nexport default Player","import { connect } from 'react-redux'\nimport PlayerComponent from '../components/Player'\n\nexport const Player = connect(state => ({\n  video: state.video\n}), {})(PlayerComponent)","const messages = (state = [], action) => {\n    switch (action.type) {\n      case 'ADD_MESSAGE':\n      case 'MESSAGE_RECEIVED':\n        return state.concat([\n          {\n            message: action.message,\n            author: action.author,\n            id: action.id\n          }\n        ])\n      default:\n        return state\n    }\n  }\n  \n  export default messages","import * as types from '../constants/ActionTypes'\n\nconst users = (state = [], action) => {\n  switch (action.type) {\n    case types.ADD_USER:\n      return state.concat([{ name: action.name, id: action.id }])\n    case types.USERS_LIST:\n      return action.users\n    default:\n      return state\n  }\n}\n\nexport default users","const video = (state = [], action) => {\n    switch (action.type) {\n      case 'ADD_MESSAGE':\n      case 'MESSAGE_RECEIVED':\n        return state.concat([\n          {\n            url: action.message\n          }\n        ]);\n      default:\n        return state\n    }\n  }\n  \n  export default video","import { combineReducers } from \"redux\"\nimport messages from \"./messages\"\nimport users from \"./users\"\nimport video from \"./video\"\n\nconst chat = combineReducers({\n  messages,\n  users,\n  video\n});\n\nexport default chat","import { takeEvery } from 'redux-saga/effects'\nimport * as types from '../constants/ActionTypes'\n\nconst handleNewMessage = function* handleNewMessage(params) {\n  yield takeEvery(types.ADD_MESSAGE, (action) => {\n    action.author = params.username\n    params.socket.send(JSON.stringify(action))\n  })\n}\n\nexport default handleNewMessage","import * as types from '../constants/ActionTypes'\nimport { addUser, messageReceived, populateUsersList } from '../actions'\n\nconst setupSocket = (dispatch, username) => {\n  var loc = window.location, ws_uri;\n  if (loc.protocol === \"https:\") {\n      ws_uri = \"wss:\";\n  } else {\n      ws_uri = \"ws:\";\n  }\n  ws_uri += \"//\" + loc.host;\n  ws_uri += loc.pathname + \"/to/ws\";\n\n\n  const socket = new WebSocket(ws_uri)\n\n  socket.onopen = () => {\n    socket.send(JSON.stringify({\n      type: types.ADD_USER,\n      name: username\n    }))\n  }\n  socket.onmessage = (event) => {\n    const data = JSON.parse(event.data)\n    switch (data.type) {\n      case types.ADD_MESSAGE:\n        dispatch(messageReceived(data.message, data.author))\n        break\n      case types.ADD_USER:\n        dispatch(addUser(data.name))\n        break\n      case types.USERS_LIST:\n        dispatch(populateUsersList(data.users))\n        break\n      default:\n        break\n    }\n  }\n\n  return socket\n}\n\nexport default setupSocket","import Chance from 'chance'\n\nconst chance = new Chance()\nexport default chance.first()","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\n\nimport './index.css'\nimport App from './App'\n// import registerServiceWorker from './registerServiceWorker'\nimport reducers from './reducers'\nimport handleNewMessage from './sagas'\nimport setupSocket from './sockets'\nimport username from './utils/name'\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst store = createStore(\n  reducers,\n  applyMiddleware(sagaMiddleware)\n)\n\nconst socket = setupSocket(store.dispatch, username)\n\nsagaMiddleware.run(handleNewMessage, { socket, username })\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n// registerServiceWorker()"],"sourceRoot":""}